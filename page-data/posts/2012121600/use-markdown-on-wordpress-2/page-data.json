{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2012121600/use-markdown-on-wordpress-2","result":{"data":{"markdownRemark":{"id":"661e7811-549d-526a-b3a6-4f5aff3349d6","html":"<p>WordPress を Markdown 書式で更新する (1) で Markdown 書式を HTML にできたので、それを WordPress (以前使っていた blog システム) に投稿する手順を調べてみた。</p>\n<h2 id=\"weblogger-mode-のインストールと設定\" style=\"position:relative;\"><a href=\"#weblogger-mode-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E8%A8%AD%E5%AE%9A\" aria-label=\"weblogger mode のインストールと設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Weblogger Mode のインストールと設定</h2>\n<p>まずは、プログラムから投稿するために WordPress の XML-RPC インターフェイスを有効にする。\nWordPress なので設定メニューをクリックするだけで OK。\nこれは <code class=\"language-text\">org2blog</code> を試したときにやってあったので、今回は省略。</p>\n<p>Emacs から WordPress への投稿についてググってみたところ、<a href=\"http://emacswiki.org/emacs/WebloggerMode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Weblogger Mode</a> を使えばいいらしいので、インストールして設定。</p>\n<ul>\n<li><a href=\"http://emacswiki.org/emacs/WebloggerMode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EmacsWiki: Weblogger Mode</a></li>\n</ul>\n<p>上記ページを参考に、<code class=\"language-text\">weblogger.el</code> をダウンロードして <code class=\"language-text\">site-lisp</code> ディレクトリに放り込む。</p>\n<div class=\"gatsby-highlight\" data-language=\"elisp\"><pre class=\"language-elisp\"><code class=\"language-elisp\"><span class=\"token comment\">;; weblogger</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">require</span> <span class=\"token quoted-symbol variable symbol\">'weblogger</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">global-set-key</span> <span class=\"token punctuation\">(</span><span class=\"token car\">kbd</span> <span class=\"token string\">\"C-c b\"</span><span class=\"token punctuation\">)</span> <span class=\"token quoted-symbol variable symbol\">'weblogger-start-entry</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">M-x weblogger-setup-weblog RET</code> を実行すると、設定が必要な項目を順番に聞かれるので入力していく。</p>\n<p>これで Weblogger Mode の設定は終了。</p>\n<h2 id=\"記事の投稿\" style=\"position:relative;\"><a href=\"#%E8%A8%98%E4%BA%8B%E3%81%AE%E6%8A%95%E7%A8%BF\" aria-label=\"記事の投稿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>記事の投稿</h2>\n<p><code class=\"language-text\">M-x weblogger-start-entry RET</code> で投稿エントリを作成開始。\n次のような感じで、記事のヘッダを入力したバッファが表示される。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Subject: blog 記事のタイトルを入力\nKeywords: 記事のタグを入力？ (試してない)\nDate: 日付文字列\nFrom: 投稿者\nNewsgroup: 投稿する blog 名称\n--text follows this line--</code></pre></div>\n<p><code class=\"language-text\">Subject:</code> と <code class=\"language-text\">Keywords:</code> 以外はデフォルト値が入っているので、だいたいは <code class=\"language-text\">Subject:</code> だけ入力している。\nどうも <code class=\"language-text\">Date:</code> フィールドでタイムゾーンがうまく扱われていないらしく、投稿後に確認すると9時間ずれている。\nググってみると <code class=\"language-text\">+0900</code> をつけたらうまくいったという記述も見かけたんだけど…\nとりあえず、投稿の日付は編集したいことが多いので気にしないという方針で。</p>\n<p>本文は Markdown から生成した HTML を <code class=\"language-text\">C-x i</code> で読み込む。\nそのままだと HTML ヘッダも含まれてしまっているので、 <code class=\"language-text\">&lt;body&gt;〜&lt;/body&gt;</code> の中身だけ残して削除。\nこのへんもちょっと elisp を書いたら対応できそうではあるけど、記事の HTML をいちおう確認して投稿したいので手動対応で。書くの面倒だし(ぉぃ)。</p>\n<p>いくつか記事を作って試してみて、下記のルールで書けばそのまま張り込めそうということがわかった。</p>\n<ul>\n<li>見出しは <code class=\"language-text\">###</code> (h3) 以下のレベルを使い、必ずなにかのタグ <code class=\"language-text\">[tag]</code> をつける</li>\n<li>\n<p>コードブロックは <code class=\"language-text\">[コード]〜[/コード]</code> で囲む</p>\n<ul>\n<li>あまりスマートじゃないけど、SyntaxHighlighter で使う <code class=\"language-text\">[コード]</code> は HTML タグじゃないからしょうがない…</li>\n</ul>\n</li>\n</ul>\n<p>ちょっと手作業が入るけどブラウザの入力窓で書くのと比べたら断然楽だし、手元に元ファイルが残るので、しばらくこの手でいくことに決めた。\n最近の数エントリは実際に上記の手順で更新してます。\n(注: 以前使っていた blog システムの話です…)</p>","fields":{"slug":"/posts/2012121600/use-markdown-on-wordpress-2","tagSlugs":["/tag/word-press/"]},"frontmatter":{"date":"2012-12-16T12:43:46.000Z","description":"HTML を WordPress に API 経由で投稿する。","tags":["WordPress"],"title":"WordPress を Markdown 書式で更新する(2): Weblogger Mode","socialImage":null}}},"pageContext":{"slug":"/posts/2012121600/use-markdown-on-wordpress-2"}},"staticQueryHashes":["251939775","401334301","825871152"]}